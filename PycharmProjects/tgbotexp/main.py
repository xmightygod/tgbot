import os
import logging
from datetime import datetime
from dotenv import load_dotenv
import asyncio

load_dotenv()

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, LabeledPrice, BotCommand
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
PAYMENT_TOKEN = os.getenv('PAYMENT_TOKEN')
DEVELOPER_MODE = os.getenv('DEVELOPER_MODE', 'False').lower() == 'true'

if not API_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN")
if not ADMIN_CHAT_ID:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω ADMIN_CHAT_ID")
if not PAYMENT_TOKEN:
    logger.warning("PAYMENT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

try:
    ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
except ValueError:
    raise ValueError("ADMIN_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞
FLAVORS_REGULAR = {
    "üçì –®–æ–∫–æ–ª–∞–¥+–∫–ª—É–±–Ω–∏–∫–∞": 2300,
    "üçå –®–æ–∫–æ–±–∞–Ω–∞–Ω": 2500,
    "‚òïÔ∏è –§–∏—Å—Ç–∞—à–∫–∞+–º–∞–ª–∏–Ω–∞": 2300,
    "üçí –ö—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç+–≤–∏—à–Ω—è": 2300,
    "üç∞ –ö—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç+–∫—Ä–µ–º—á–∏–∑": 2300,
    "üçØ –ú–µ–¥–æ–≤–∏–∫+–±—Ä—É—Å–Ω–∏–∫–∞": 2300,
    "ü•õ –ú–æ–ª–æ—á–Ω—ã–π –±–ª–∞–Ω—à": 2300,
    "ü•ï –ú–æ—Ä–∫–æ–≤–Ω—ã–π": 2300,
    "üç´ –®–æ–∫–æ–ª–∞–¥–Ω—ã–π —á–∏–∑–∫–µ–π–∫": 2300,
    "üçµ –§–∏—Å—Ç–∞—à.—á–∏–∑–∫–µ–π–∫+–≤–∏—à–Ω—è": 2300
}

FLAVORS_BENTO = {
    "üçì –®–æ–∫–æ–ª–∞–¥+–∫–ª—É–±–Ω–∏–∫–∞": 1200,
    "üç´ –°–Ω–∏–∫–µ—Ä—Å": 1200,
    "‚òïÔ∏è –§–∏—Å—Ç–∞—à–∫–∞+–º–∞–ª–∏–Ω–∞": 1200,
    "üçí –ö—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç+–≤–∏—à–Ω—è": 1200
}

SIZES = {
    "1 –∫–≥": 1.0,
    "2 –∫–≥": 2.0,
    "3 –∫–≥": 3.0,
    "4 –∫–≥": 4.0,
    "5 –∫–≥": 5.0,
    "6 –∫–≥": 6.0,
    "7 –∫–≥": 7.0,
    "8 –∫–≥": 8.0,
    "9 –∫–≥": 9.0,
    "10 –∫–≥": 10.0,
    "11 –∫–≥": 11.0,
    "12 –∫–≥": 12.0,
    "13 –∫–≥": 13.0,
    "14 –∫–≥": 14.0,
    "15 –∫–≥": 15.0
}

CAKE_TYPES = {
    "üç∞ –û–±—ã—á–Ω—ã–π —Ç–æ—Ä—Ç": "regular",
    "üéÇ –ë–µ–Ω—Ç–æ-—Ç–æ—Ä—Ç (400-450–≥)": "bento"
}

DECOR_OPTIONS_REGULAR = {
    "üé® –†–∏—Å—É–Ω–æ–∫ —Ü–≤–µ—Ç–Ω–æ–π (–æ—Ç 500—Ä)": 500,
    "‚úèÔ∏è –†–∏—Å—É–Ω–æ–∫ —Å—Ö–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–æ—Ç 500—Ä)": 500,
    "üñ® –ü–µ—á–∞—Ç—å –Ω–∞ –±—É–º–∞–≥–µ +370—Ä": 370,
    "‚ùå –ë–µ–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è": 0
}

DECOR_OPTIONS_BENTO = {
    "üé® –†–∏—Å—É–Ω–æ–∫ (–æ—Ç 300—Ä)": 300,
    "üñ® –ü–µ—á–∞—Ç—å –Ω–∞ –±—É–º–∞–≥–µ +370—Ä": 370,
    "‚ùå –ë–µ–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è": 0
}


class CakeOrder(StatesGroup):
    choosing_cake_type = State()
    choosing_flavor = State()
    choosing_size = State()
    choosing_cream_color = State()
    choosing_decor = State()
    choosing_cookies = State()
    cookies_count = State()
    cookies_photo = State()
    recipient_name = State()
    delivery_date = State()
    order_comment = State()
    photo_reference = State()
    user_contact = State()
    payment_method = State()
    payment_confirmation = State()


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="order", description="–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑"),
        BotCommand(command="prices", description="–£–∑–Ω–∞—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫–∏")
    ]

    if DEVELOPER_MODE:
        commands.extend([
            BotCommand(command="dev_paytest", description="–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã (dev)"),
            BotCommand(command="dev_skip", description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É (dev)")
        ])

    await bot.set_my_commands(commands)


async def send_admin_notification(text: str, photo=None):
    try:
        if photo:
            await bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=photo,
                caption=text,
                parse_mode=ParseMode.HTML
            )
        else:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=text,
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    disclaimer = (
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        "–ì–æ—Ç–æ–≤—ã–π —Ç–æ—Ä—Ç –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "
        "–∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.\n\n"
        "–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å –≤–∞–º–∏ –º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ "
        "–∫–æ—Ñ–µ–π–Ω–∏-–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π <b>¬´–°–ª–∏–≤–∫–∏¬ª</b>.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! ‚ù§Ô∏è"
    )

    builder = ReplyKeyboardBuilder()
    builder.button(text="/order")
    builder.button(text="/prices")
    builder.button(text="/help")
    builder.button(text="/cancel")

    if DEVELOPER_MODE:
        builder.button(text="/dev_paytest")
        builder.button(text="/dev_skip")

    builder.adjust(2)

    await message.answer(disclaimer, parse_mode=ParseMode.HTML)
    await message.answer(
        "üç∞ –ü—Ä–∏–≤–µ—Ç! –Ø –°–ª–∏–≤–∫–∏–ë–æ—Ç - –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Ç–æ—Ä—Ç–∞!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(Command("prices"))
async def cmd_prices(message: types.Message):
    regular_prices = "\n".join([f"{flavor} - {price}‚ÇΩ/–∫–≥" for flavor, price in FLAVORS_REGULAR.items()])
    bento_prices = "\n".join([f"{flavor} - {price}‚ÇΩ" for flavor, price in FLAVORS_BENTO.items()])

    prices_text = (
        "üéÇ <b>–†–∞—Å—Ü–µ–Ω–∫–∏ –Ω–∞ —Ç–æ—Ä—Ç—ã</b>\n\n"
        "<b>–û–±—ã—á–Ω—ã–µ —Ç–æ—Ä—Ç—ã (—Ü–µ–Ω–∞ –∑–∞ 1 –∫–≥):</b>\n"
        f"{regular_prices}\n\n"
        "<b>–ë–µ–Ω—Ç–æ-—Ç–æ—Ä—Ç—ã (400-450–≥):</b>\n"
        f"{bento_prices}\n\n"
        "üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —Ü–≤–µ—Ç –∫—Ä–µ–º–∞ –∏ —Ç.–¥.) –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.\n"
        "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."
    )

    await message.answer(prices_text, parse_mode=ParseMode.HTML)


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "‚ùì <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ /order\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ—Ä—Ç–∞\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å\n"
        "4. –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "5. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/order - –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
        "/prices - —É–∑–Ω–∞—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫–∏\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/cancel - –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"
    )

    if DEVELOPER_MODE:
        help_text += "\n\n<b>–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:</b>\n"
        help_text += "/dev_paytest - —Ç–µ—Å—Ç –æ–ø–ª–∞—Ç—ã\n"
        help_text += "/dev_skip - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É"

    await message.answer(help_text, parse_mode=ParseMode.HTML)


@dp.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")
@dp.message(Command("cancel"))
async def cancel_order(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(Command("order"))
async def start_order(message: types.Message, state: FSMContext):
    disclaimer = (
        "‚ö†Ô∏è <b>–ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞:</b>\n\n"
        "–ú—ã —É–≤–∞–∂–∞–µ–º —Ç—Ä—É–¥ –Ω–∞—à–∏—Ö –∫–æ–Ω–¥–∏—Ç–µ—Ä–æ–≤!\n\n"
        "–ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ç–∞–ª–∏ —É—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ —Å–∏–ª –∏ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ.\n"
        "–ü–æ—ç—Ç–æ–º—É –≤ –±–æ—Ç–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.\n"
        "–û–Ω–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –µ–≥–æ –∑–∞–±–∏—Ä–∞—Ç—å.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏."
    )

    await message.answer(disclaimer, parse_mode=ParseMode.HTML)

    builder = ReplyKeyboardBuilder()
    for cake_type in CAKE_TYPES.keys():
        builder.button(text=cake_type)
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")
    builder.adjust(1)

    await state.set_state(CakeOrder.choosing_cake_type)
    await message.answer(
        "üéÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ—Ä—Ç–∞:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(CakeOrder.choosing_cake_type)
async def process_cake_type(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    if message.text not in CAKE_TYPES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ—Ä—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    cake_type = CAKE_TYPES[message.text]
    await state.update_data(cake_type=cake_type)
    flavors = FLAVORS_BENTO if cake_type == "bento" else FLAVORS_REGULAR

    builder = ReplyKeyboardBuilder()
    for flavor in flavors.keys():
        builder.button(text=flavor)
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")
    builder.adjust(2)

    await state.set_state(CakeOrder.choosing_flavor)
    await message.answer(
        "üéÇ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –Ω–∞—á–∏–Ω–∫–∏:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(CakeOrder.choosing_flavor)
async def process_flavor(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    data = await state.get_data()
    flavors = FLAVORS_BENTO if data.get('cake_type') == "bento" else FLAVORS_REGULAR

    if message.text not in flavors:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    await state.update_data(flavor=message.text, price=flavors[message.text])

    if data.get('cake_type') == "bento":
        await state.set_state(CakeOrder.choosing_cream_color)
        await message.answer(
            "üé® –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ü–≤–µ—Ç –∫—Ä–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–æ–∑–æ–≤—ã–π, –≥–æ–ª—É–±–æ–π, —Ñ–∏—Å—Ç–∞—à–∫–æ–≤—ã–π).\n\n"
            "üí° –í—Å–µ —Ü–≤–µ—Ç–∞ –∫—Ä–æ–º–µ –±–µ–ª–æ–≥–æ –¥–æ–±–∞–≤–ª—è—é—Ç +100‚ÇΩ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ '–±–µ–ª—ã–π' –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–µ–ª—ã–π –∫—Ä–µ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        builder = ReplyKeyboardBuilder()
        for size in SIZES.keys():
            builder.button(text=size)
        builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")
        builder.adjust(3)  # –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –±—É–¥—É—Ç –≤ 3 –∫–æ–ª–æ–Ω–∫–∏
        await state.set_state(CakeOrder.choosing_size)
        await message.answer(
            "üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )


@dp.message(CakeOrder.choosing_cream_color)
async def process_cream_color(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    cream_color = message.text.strip().lower()
    cream_price = 100 if cream_color != "–±–µ–ª—ã–π" else 0

    await state.update_data(
        cream_color=message.text,
        cream_price=cream_price
    )

    builder = ReplyKeyboardBuilder()
    for decor in DECOR_OPTIONS_BENTO.keys():
        builder.button(text=decor)
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")
    builder.adjust(1)

    await state.set_state(CakeOrder.choosing_decor)
    await message.answer(
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(CakeOrder.choosing_size)
async def process_size(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    if message.text not in SIZES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    data = await state.get_data()
    total_price = int(data['price'] * SIZES[message.text])
    await state.update_data(size=message.text, total_price=total_price)

    builder = ReplyKeyboardBuilder()
    for decor in DECOR_OPTIONS_REGULAR.keys():
        builder.button(text=decor)
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")
    builder.adjust(2)

    await state.set_state(CakeOrder.choosing_decor)
    await message.answer(
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(CakeOrder.choosing_decor)
async def process_decor(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    data = await state.get_data()
    decor_options = DECOR_OPTIONS_BENTO if data.get('cake_type') == "bento" else DECOR_OPTIONS_REGULAR

    if message.text not in decor_options:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    await state.update_data(decor_option=message.text, decor_price=decor_options[message.text])

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ –ø—Ä—è–Ω–∏–∫–∞—Ö
    await state.set_state(CakeOrder.choosing_cookies)
    builder = ReplyKeyboardBuilder()
    builder.button(text="–î–∞, –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä—è–Ω–∏–∫–∏")
    builder.button(text="–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä—è–Ω–∏–∫–æ–≤")
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")
    builder.adjust(1)
    await message.answer(
        "üç™ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä—è–Ω–∏–∫–∏ –∫ –∑–∞–∫–∞–∑—É? (–¶–µ–Ω–∞ –æ—Ç 160‚ÇΩ –∑–∞ —à—Ç.)",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(CakeOrder.choosing_cookies)
async def process_cookies_choice(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    if message.text == "–î–∞, –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä—è–Ω–∏–∫–∏":
        await state.set_state(CakeOrder.cookies_count)
        await message.answer(
            "‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä—è–Ω–∏–∫–æ–≤:",
            reply_markup=ReplyKeyboardRemove()
        )
    elif message.text == "–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä—è–Ω–∏–∫–æ–≤":
        await state.update_data(cookies_count=0, cookies_price=0)
        await state.set_state(CakeOrder.recipient_name)
        await message.answer(
            "‚úèÔ∏è –ù–∞ —á—å–µ –∏–º—è –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑? (–§–ò–û –∏–ª–∏ –∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é)",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")


@dp.message(CakeOrder.cookies_count)
async def process_cookies_count(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    try:
        count = int(message.text)
        if count <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    price_per_cookie = 160
    total_cookies_price = price_per_cookie * count

    await state.update_data(cookies_count=count, cookies_price=total_cookies_price)
    await state.set_state(CakeOrder.cookies_photo)
    await message.answer(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ –¥–ª—è –ø—Ä—è–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(CakeOrder.cookies_photo, F.photo)
async def process_cookies_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(cookies_photo=photo_id)
    await state.set_state(CakeOrder.recipient_name)
    await message.answer(
        "‚úèÔ∏è –ù–∞ —á—å–µ –∏–º—è –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑? (–§–ò–û –∏–ª–∏ –∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é)",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(CakeOrder.cookies_photo)
async def skip_cookies_photo(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return

    await state.update_data(cookies_photo=None)
    await state.set_state(CakeOrder.recipient_name)
    await message.answer(
        "‚úèÔ∏è –ù–∞ —á—å–µ –∏–º—è –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑? (–§–ò–û –∏–ª–∏ –∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é)",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(CakeOrder.recipient_name)
async def process_recipient_name(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    if not message.text or len(message.text) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
        return

    await state.update_data(recipient_name=message.text)
    await state.set_state(CakeOrder.delivery_date)
    await message.answer(
        "üìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –Ω—É–∂–µ–Ω —Ç–æ—Ä—Ç? (–£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.08.2024",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(CakeOrder.delivery_date)
async def process_delivery_date(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    try:
        delivery_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        if delivery_date < datetime.now().date():
            await message.answer("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    await state.update_data(delivery_date=message.text)
    await state.set_state(CakeOrder.order_comment)
    await message.answer(
        "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):\n\n"
        "–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(CakeOrder.order_comment)
async def process_order_comment(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    comment = message.text if message.text.lower() != "–Ω–µ—Ç" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
    await state.update_data(order_comment=comment)
    await state.set_state(CakeOrder.photo_reference)
    await message.answer(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(CakeOrder.photo_reference, F.photo)
async def process_photo_reference(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_reference=photo_id)
    await ask_for_contact(message, state)


@dp.message(CakeOrder.photo_reference)
async def skip_photo_reference(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return

    await state.update_data(photo_reference=None)
    await ask_for_contact(message, state)


async def ask_for_contact(message: types.Message, state: FSMContext):
    await state.set_state(CakeOrder.user_contact)
    await message.answer(
        "üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
                [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")]
            ],
            resize_keyboard=True
        )
    )


@dp.message(CakeOrder.user_contact, F.contact)
async def process_contact_from_button(message: types.Message, state: FSMContext):
    await process_contact(message, state, message.contact.phone_number)


@dp.message(CakeOrder.user_contact)
async def process_contact_from_text(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    if not message.text or len(message.text) < 5:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    await process_contact(message, state, message.text)


async def process_contact(message: types.Message, state: FSMContext, contact_info: str):
    await state.update_data(user_contact=contact_info)

    builder = ReplyKeyboardBuilder()
    builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω (‚âà50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞)")

    if DEVELOPER_MODE:
        builder.button(text="üîß –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É (dev)")

    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå")
    builder.adjust(1)

    await state.set_state(CakeOrder.payment_method)
    await message.answer(
        "üíµ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–µ—Å—Ç–∏ ‚âà50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(CakeOrder.payment_method)
async def process_payment(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå":
        await cancel_order(message, state)
        return

    if message.text == "üîß –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É (dev)" and DEVELOPER_MODE:
        await state.update_data(payment_confirmation=True)
        await confirm_order(message, state)
        return

    if not PAYMENT_TOKEN:
        await message.answer("‚ö†Ô∏è –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    data = await state.get_data()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if data.get('cake_type') == "bento":
        base_price = FLAVORS_BENTO.get(data.get('flavor', ''), 0)
    else:
        size = data.get('size', '1 –∫–≥')
        size_value = float(size.split()[0])  # –ò–∑–º–µ–Ω–∏–ª–∏ split()[1] –Ω–∞ split()[0]
        base_price = FLAVORS_REGULAR.get(data.get('flavor', ''), 0) * size_value

    decor_price = data.get('decor_price', 0)
    cream_price = data.get('cream_price', 0)
    cookies_price = data.get('cookies_price', 0)

    total_price = int(base_price + decor_price + cream_price + cookies_price)
    prepayment_amount = int(total_price * 0.5)

    await state.update_data(total_price=total_price)

    prices = [LabeledPrice(label="–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50% –∑–∞ —Ç–æ—Ä—Ç", amount=prepayment_amount * 100)]

    try:
        await bot.send_invoice(
            chat_id=message.chat.id,
            title=f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ—Ä—Ç {data.get('flavor', '')}",
            description=f"–†–∞–∑–º–µ—Ä: {data.get('size', '1 –∫–≥')}. –û—Å—Ç–∞—Ç–æ–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.",
            payload="cake_prepayment",
            provider_token=PAYMENT_TOKEN,
            currency="RUB",
            prices=prices,
            need_name=True,
            need_phone_number=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message, state: FSMContext):
    await state.update_data(payment_confirmation=True)
    await confirm_order(message, state)


@dp.message(Command("dev_paytest"))
async def dev_payment_test(message: types.Message, state: FSMContext):
    if not DEVELOPER_MODE:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        return

    builder = ReplyKeyboardBuilder()
    builder.button(text="100 —Ä—É–±")
    builder.button(text="500 —Ä—É–±")
    builder.button(text="1000 —Ä—É–±")
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå")
    builder.adjust(2)

    await message.answer(
        "üîß –¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(F.text.endswith("—Ä—É–±") & F.from_user.id.in_({int(ADMIN_CHAT_ID)} if DEVELOPER_MODE else set()))
async def process_dev_payment_test(message: types.Message):
    try:
        amount = int(message.text.split()[0])
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")
        return

    prices = [LabeledPrice(label="–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞", amount=amount * 100)]

    try:
        await bot.send_invoice(
            chat_id=message.chat.id,
            title="–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã",
            description=f"–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±",
            payload="dev_test_payment",
            provider_token=PAYMENT_TOKEN,
            currency="RUB",
            prices=prices
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –æ–ø–ª–∞—Ç—ã: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")


@dp.message(Command("dev_skip"))
async def dev_skip_payment(message: types.Message, state: FSMContext):
    if not DEVELOPER_MODE:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        return

    current_state = await state.get_state()
    if current_state == CakeOrder.payment_method:
        await state.update_data(payment_confirmation=True)
        await confirm_order(message, state)
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ –æ–ø–ª–∞—Ç—ã")


async def confirm_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if data.get('cake_type') == "bento":
        base_price = FLAVORS_BENTO.get(data.get('flavor', ''), 0)
    else:
        size = data.get('size', '1 –∫–≥')
        size_value = float(size.split()[0])  # –ò–∑–º–µ–Ω–∏–ª–∏ split()[1] –Ω–∞ split()[0]
        base_price = FLAVORS_REGULAR.get(data.get('flavor', ''), 0) * size_value

    decor_price = data.get('decor_price', 0)
    cream_price = data.get('cream_price', 0)
    cookies_price = data.get('cookies_price', 0)


    total_price = int(base_price + decor_price + cream_price + cookies_price)

    order_text = (
        f"üéÇ <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó {'–ë–ï–ù–¢–û-' if data.get('cake_type') == 'bento' else ''}–¢–û–†–¢–ê</b>\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {username}\n"
        f"üì± –¢–µ–ª: {data.get('user_contact', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {'–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%' if data.get('payment_confirmation') else '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}\n\n"
    )

    if data.get('cake_type') == "bento":
        order_text += (
            f"üéÇ –¢–∏–ø: –ë–µ–Ω—Ç–æ-—Ç–æ—Ä—Ç (400-450–≥)\n"
            f"üç∞ –í–∫—É—Å: {data.get('flavor', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"
            f"üé® –¶–≤–µ—Ç –∫—Ä–µ–º–∞: {data.get('cream_color', '–Ω–µ –≤—ã–±—Ä–∞–Ω')} "
            f"{'(+100‚ÇΩ)' if data.get('cream_price', 0) > 0 else ''}\n"
        )
    else:
        order_text += (
            f"üéÇ –¢–∏–ø: –û–±—ã—á–Ω—ã–π —Ç–æ—Ä—Ç\n"
            f"üç∞ –í–∫—É—Å: {data.get('flavor', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {data.get('size', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"
        )

    order_text += (
        f"‚ú® –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {data.get('decor_option', '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
    )

    if data.get('cookies_count', 0) > 0:
        order_text += f"üç™ –ü—Ä—è–Ω–∏–∫–∏: {data.get('cookies_count')} —à—Ç. ({data.get('cookies_price', 0)}‚ÇΩ)\n"

    order_text += (
        f"üëë –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data.get('recipient_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÖ –î–∞—Ç–∞: {data.get('delivery_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üíµ –°—É–º–º–∞: {total_price}‚ÇΩ\n\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{data.get('order_comment', '–Ω–µ—Ç')}\n\n"
        f"#–∑–∞–∫–∞–∑ #{'–±–µ–Ω—Ç–æ' if data.get('cake_type') == 'bento' else '—Ç–æ—Ä—Ç'}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Ç–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    photo_id = data.get('photo_reference')
    if photo_id:
        await send_admin_notification(order_text, photo=photo_id)
    else:
        await send_admin_notification(order_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ –ø—Ä—è–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    cookies_photo_id = data.get('cookies_photo')
    if cookies_photo_id:
        await send_admin_notification("üì∏ –†–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è –ø—Ä—è–Ω–∏–∫–æ–≤:", photo=cookies_photo_id)

    confirmation_message = (
        "‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b> –í–æ—Ç –¥–µ—Ç–∞–ª–∏:\n\n"
        f"üéÇ –¢–∏–ø: {'–ë–µ–Ω—Ç–æ-—Ç–æ—Ä—Ç' if data.get('cake_type') == 'bento' else '–û–±—ã—á–Ω—ã–π —Ç–æ—Ä—Ç'}\n"
        f"üëë –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data.get('recipient_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÖ –î–∞—Ç–∞: {data.get('delivery_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üç∞ –í–∫—É—Å: {data.get('flavor', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"
    )

    if data.get('cake_type') != "bento":
        confirmation_message += f"üìè –†–∞–∑–º–µ—Ä: {data.get('size', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"

    if data.get('cake_type') == "bento":
        confirmation_message += f"üé® –¶–≤–µ—Ç –∫—Ä–µ–º–∞: {data.get('cream_color', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"

    confirmation_message += (
        f"‚ú® –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {data.get('decor_option', '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
    )

    if data.get('cookies_count', 0) > 0:
        confirmation_message += f"üç™ –ü—Ä—è–Ω–∏–∫–∏: {data.get('cookies_count')} —à—Ç.\n"

    confirmation_message += (
        f"üíµ –°—É–º–º–∞:‚âà {total_price}‚ÇΩ\n\n"
    )

    if data.get('payment_confirmation'):
        confirmation_message += "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞\n\n"
    else:
        confirmation_message += "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞\n\n"

    confirmation_message += (
        "–ù–∞—à –∫–æ–Ω–¥–∏—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ‚ù§Ô∏è"
    )

    await message.answer(confirmation_message, parse_mode=ParseMode.HTML, reply_markup=ReplyKeyboardRemove())
    await state.clear()


async def main():
    await set_commands(bot)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())